const fs = require('fs');
const path = require('path');

/**
 * Script to update itinerary metadata automatically
 */

const itinerariesDir = path.join(__dirname, '../public/data/itineraries');

// Country to flag mapping (same as in the TypeScript file)
const COUNTRY_FLAGS = {
  Hungary: 'üá≠üá∫',
  Austria: 'üá¶üáπ',
  France: 'üá´üá∑',
  'United Kingdom': 'üá¨üáß',
  Italy: 'üáÆüáπ',
  Spain: 'üá™üá∏',
  Germany: 'üá©üá™',
  Netherlands: 'üá≥üá±',
  'Czech Republic': 'üá®üáø',
  Czechia: 'üá®üáø',
  Portugal: 'üáµüáπ',
  Switzerland: 'üá®üá≠',
  Belgium: 'üáßüá™',
  Denmark: 'üá©üá∞',
  Sweden: 'üá∏üá™',
  Norway: 'üá≥üá¥',
  Finland: 'üá´üáÆ',
  Ireland: 'üáÆüá™',
  Poland: 'üáµüá±',
  Greece: 'üá¨üá∑',
  Croatia: 'üá≠üá∑',
  Slovenia: 'üá∏üáÆ',
  Slovakia: 'üá∏üá∞',
  Romania: 'üá∑üá¥',
  Bulgaria: 'üáßüá¨',
  Serbia: 'üá∑üá∏',
  'Bosnia and Herzegovina': 'üáßüá¶',
  Montenegro: 'üá≤üá™',
  Albania: 'üá¶üá±',
  'North Macedonia': 'üá≤üá∞',
  Kosovo: 'üáΩüá∞',
  Moldova: 'üá≤üá©',
  Ukraine: 'üá∫üá¶',
  Belarus: 'üáßüáæ',
  Lithuania: 'üá±üáπ',
  Latvia: 'üá±üáª',
  Estonia: 'üá™üá™',
  Russia: 'üá∑üá∫',
  Turkey: 'üáπüá∑',
  Cyprus: 'üá®üáæ',
  Malta: 'üá≤üáπ',
  Iceland: 'üáÆüá∏',
  Luxembourg: 'üá±üá∫',
  Liechtenstein: 'üá±üáÆ',
  Monaco: 'üá≤üá®',
  'San Marino': 'üá∏üá≤',
  'Vatican City': 'üáªüá¶',
  Andorra: 'üá¶üá©',
};

// Country to emoji mapping
const COUNTRY_EMOJIS = {
  Hungary: 'üèõÔ∏è',
  Austria: 'üé≠',
  France: 'üóº',
  'United Kingdom': 'üá¨üáß',
  Italy: 'üèõÔ∏è',
  Spain: 'üåû',
  Germany: 'üèõÔ∏è',
  Netherlands: 'üå∑',
  'Czech Republic': 'üè∞',
  Czechia: 'üè∞',
  Portugal: 'üç∑',
  Switzerland: 'üèîÔ∏è',
  Belgium: 'üç´',
  Denmark: 'üßú‚Äç‚ôÄÔ∏è',
  Sweden: 'üè∞',
  Norway: '‚ùÑÔ∏è',
  Finland: 'üéÖ',
  Ireland: 'üç∫',
  Poland: 'üè∞',
  Greece: 'üèõÔ∏è',
  Croatia: 'üèñÔ∏è',
  Slovenia: 'üèîÔ∏è',
  Slovakia: 'üè∞',
  Romania: 'üè∞',
  Bulgaria: 'üåπ',
  Serbia: 'üè∞',
  'Bosnia and Herzegovina': 'üèîÔ∏è',
  Montenegro: 'üèîÔ∏è',
  Albania: 'üèîÔ∏è',
  'North Macedonia': 'üèîÔ∏è',
  Kosovo: 'üèîÔ∏è',
  Moldova: 'üçá',
  Ukraine: 'üåª',
  Belarus: 'üå≤',
  Lithuania: 'üè∞',
  Latvia: 'üå≤',
  Estonia: 'üå≤',
  Russia: 'üè∞',
  Turkey: 'üïå',
  Cyprus: 'üèñÔ∏è',
  Malta: 'üè∞',
  Iceland: 'üåã',
  Luxembourg: 'üè∞',
  Liechtenstein: 'üèîÔ∏è',
  Monaco: 'üèéÔ∏è',
  'San Marino': 'üè∞',
  'Vatican City': '‚õ™',
  Andorra: 'üèîÔ∏è',
};

function extractCountriesFromItinerary(itinerary) {
  const countries = new Set();

  itinerary.points.forEach(point => {
    // Try to extract country from address
    const addressParts = point.address.split(',').map(part => part.trim());
    const lastPart = addressParts[addressParts.length - 1];

    if (lastPart && COUNTRY_FLAGS[lastPart]) {
      countries.add(lastPart);
    }
  });

  return Array.from(countries);
}

function generateFlagsFromCountries(countries) {
  return countries.map(country => COUNTRY_FLAGS[country] || 'üåç').join(' ');
}

function generateEmojiFromCountries(countries) {
  if (countries.length === 0) return '‚úàÔ∏è';

  const firstCountry = countries[0];
  return COUNTRY_EMOJIS[firstCountry] || '‚úàÔ∏è';
}

function generateItineraryMetadata(itinerary) {
  const countries = extractCountriesFromItinerary(itinerary);

  return {
    flags: generateFlagsFromCountries(countries),
    emoji: generateEmojiFromCountries(countries),
    countries,
  };
}

function updateItineraryMetadata() {
  try {
    console.log('üîÑ Updating itinerary metadata...');

    // Get all year directories
    const yearDirs = fs.readdirSync(itinerariesDir).filter(item => {
      const itemPath = path.join(itinerariesDir, item);
      return fs.statSync(itemPath).isDirectory() && /^\d{4}$/.test(item);
    });

    let updatedCount = 0;

    yearDirs.forEach(year => {
      const yearDir = path.join(itinerariesDir, year);
      const files = fs
        .readdirSync(yearDir)
        .filter(file => file.endsWith('.json'));

      files.forEach(file => {
        const filePath = path.join(yearDir, file);
        const itinerary = JSON.parse(fs.readFileSync(filePath, 'utf8'));

        // Generate metadata if it doesn't exist or force update
        const metadata = generateItineraryMetadata(itinerary);

        // Update the itinerary
        itinerary.metadata = metadata;

        // Write back to file
        fs.writeFileSync(filePath, JSON.stringify(itinerary, null, 2));

        console.log(`‚úì Updated: ${year}/${file}`);
        console.log(`  Flags: ${metadata.flags}`);
        console.log(`  Emoji: ${metadata.emoji}`);
        console.log(`  Countries: ${metadata.countries.join(', ')}`);
        console.log('');

        updatedCount++;
      });
    });

    console.log(`‚úÖ Updated metadata for ${updatedCount} itineraries!`);
  } catch (error) {
    console.error('‚ùå Error updating itinerary metadata:', error);
    process.exit(1);
  }
}

// Run update if this script is executed directly
if (require.main === module) {
  updateItineraryMetadata();
}

module.exports = { updateItineraryMetadata };
